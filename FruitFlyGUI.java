
import java.awt.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JSpinner;
import javax.swing.JTextArea;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Matt
 */
public class FruitFlyGUI extends javax.swing.JFrame {
    static private final String newline = "\n";
    JTextArea log;
    
// The color to used to draw
    private Color color = Color.RED;
// image to show which color is being used to draw   
    private BufferedImage colorSample = new BufferedImage(
            16,16,BufferedImage.TYPE_INT_RGB);
// Instantiates a BufferedImage for the class   
    private BufferedImage image = null;   
    
// Reference to the original image. 
    private BufferedImage originalImage;
// Image used to make changes.
    private BufferedImage canvasImage;
    
// Instantiates a Stroke for the class   
    private Stroke stroke = new BasicStroke(
            3,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,1.7f);
    private RenderingHints renderingHints;
    private int theStrokeSize = 5;
    private Point selectionStart; 
    private Rectangle selection;
    private int activeTool;
    private Point previousPoint;
    private static int zoomCount = 0;
    private CellImage c;
    /**
     * Creates new form FruitFlyGUI
     */
    public FruitFlyGUI() {
        initComponents();
 

        // hide the length output initially
        spermLength.setVisible((false));
        drawnSpermLength.setVisible((false));
        colorButton.setMnemonic('o');
        colorButton.setToolTipText("Choose a Color");
        ActionListener colorListener =  new ActionListener() {
                public void actionPerformed(ActionEvent arg0) {
                    Color theColor = JColorChooser.showDialog(
                            picture, "Choose a color", color);
                    if (color !=null) {
                        setColor(theColor);
                    }
                }
        };
            setColor(color);
            colorButton.addActionListener(colorListener);
            colorButton.setIcon(new ImageIcon(colorSample));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        pictureFrame2 = new javax.swing.JFrame();
        title = new java.awt.Label();
        spermLength = new javax.swing.JLabel();
        drawnSpermLength = new javax.swing.JLabel();
        drawBar = new javax.swing.JToolBar();
        colorButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jLabel1 = new javax.swing.JLabel();
        jSpinner = new javax.swing.JSpinner();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        clearAll = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        eraser = new javax.swing.JRadioButton();
        brightnessBar = new javax.swing.JToolBar();
        decreaseContrast = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        increaseContrast = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        getSpermLength = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        drawnLength = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jToolBar2 = new javax.swing.JToolBar();
        zoomOut = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        zoomIn = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        picture = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Open = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("This is my open dialog");

        javax.swing.GroupLayout pictureFrame2Layout = new javax.swing.GroupLayout(pictureFrame2.getContentPane());
        pictureFrame2.getContentPane().setLayout(pictureFrame2Layout);
        pictureFrame2Layout.setHorizontalGroup(
            pictureFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        pictureFrame2Layout.setVerticalGroup(
            pictureFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title.setName("Fruit Fly Sperm Project"); // NOI18N
        title.setText("Fruit Fly Sperm Application");

        spermLength.setText("Sperm Length:");

        drawnSpermLength.setText("Drawn Sperm Length:");

        drawBar.setRollover(true);

        colorButton.setText("Color Button");
        drawBar.add(colorButton);
        drawBar.add(jSeparator2);

        jLabel1.setText("Stroke Size: ");
        drawBar.add(jLabel1);

        jSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerStateChanged(evt);
            }
        });
        drawBar.add(jSpinner);
        drawBar.add(jSeparator5);

        clearAll.setText("Clear All");
        clearAll.setFocusable(false);
        clearAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        clearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllActionPerformed(evt);
            }
        });
        drawBar.add(clearAll);
        drawBar.add(jSeparator6);

        eraser.setText("Eraser");
        eraser.setFocusable(false);
        eraser.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        eraser.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        eraser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraserActionPerformed(evt);
            }
        });
        drawBar.add(eraser);

        brightnessBar.setRollover(true);

        decreaseContrast.setText("Decrease Contrast");
        decreaseContrast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decreaseContrastActionPerformed(evt);
            }
        });
        brightnessBar.add(decreaseContrast);
        brightnessBar.add(jSeparator1);

        increaseContrast.setText("Increase Contrast");
        increaseContrast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseContrastActionPerformed(evt);
            }
        });
        brightnessBar.add(increaseContrast);

        jToolBar1.setRollover(true);

        getSpermLength.setText("Find Length");
        getSpermLength.setFocusable(false);
        getSpermLength.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getSpermLength.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        getSpermLength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getSpermLengthActionPerformed(evt);
            }
        });
        jToolBar1.add(getSpermLength);
        jToolBar1.add(jSeparator4);

        drawnLength.setText("Find Drawn Length");
        drawnLength.setFocusable(false);
        drawnLength.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        drawnLength.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        drawnLength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawnLengthActionPerformed(evt);
            }
        });
        jToolBar1.add(drawnLength);

        jLabel2.setText("Sperm Length:");

        jLabel3.setText("Contrast:");

        jLabel4.setText("Draw:");

        jLabel5.setText("Zoom:");

        jToolBar2.setRollover(true);

        zoomOut.setText("Zoom Out");
        zoomOut.setFocusable(false);
        zoomOut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomOut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutActionPerformed(evt);
            }
        });
        jToolBar2.add(zoomOut);
        jToolBar2.add(jSeparator3);

        zoomIn.setText("Zoom In");
        zoomIn.setFocusable(false);
        zoomIn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomIn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInActionPerformed(evt);
            }
        });
        jToolBar2.add(zoomIn);

        picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fly.gif"))); // NOI18N
        picture.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                pictureMouseMoved(evt);
            }
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pictureMouseDragged(evt);
            }
        });
        picture.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pictureMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pictureMouseReleased(evt);
            }
        });
        scrollPane.setViewportView(picture);

        jMenu1.setText("File");

        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        jMenu1.add(Open);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(269, 269, 269)
                        .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(brightnessBar, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(drawBar, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(272, 272, 272)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(drawnSpermLength)
                            .addComponent(spermLength)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(606, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spermLength)
                    .addComponent(drawnSpermLength))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(brightnessBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 2, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(drawBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1694, 1694, 1694))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    File file = null;
    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            // instantiate the cell image
            c = CellImage.getCellImageFromFile(file.getAbsolutePath());
            try {
                image = ImageIO.read(file);
                originalImage = image;
                zoomCount = 0;
                canvasImage = new BufferedImage(image.getWidth(),
                         image.getHeight(),BufferedImage.TYPE_INT_ARGB);
//                Graphics2D g = this.canvasImage.createGraphics();
//                g.setRenderingHints(renderingHints);
//                g.drawImage(image, 0, 0, picture);
//                g.dispose();
                } 
            catch (IOException ex) {
                System.out.println("problem accessing file"+
                        file.getAbsolutePath());
                }
        
//            ImageIcon icon = rescaleImage(file,655,440);
            ImageIcon icon = rescaleImage(file,532,532);
            ImageIcon icon2 = new ImageIcon(image); 
//            icon2 = rescaleImage(file,655,440);
            icon2 = rescaleImage(file,532,532);
            picture.setIcon(icon2);
            picture.setHorizontalAlignment(SwingConstants.CENTER);
            picture.setVerticalAlignment(SwingConstants.CENTER);
            picture.setVisible(true);
        } 
        else {
            System.out.println("File access cancelled by user.");
        }
        
    }//GEN-LAST:event_OpenActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
       System.exit(0); 
    }//GEN-LAST:event_ExitActionPerformed

    private void increaseContrastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_increaseContrastActionPerformed
        try {
            image = ImageIO.read(file);
            c.increaseContrast();
            originalImage = image;
            ImageIcon newImage = rescaleBufferedImage(c.im,655,440);
            picture.setIcon(newImage); 
        } catch (IOException ex) {
            Logger.getLogger(FruitFlyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_increaseContrastActionPerformed

    private void pictureMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pictureMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_pictureMouseMoved

    private void getSpermLengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getSpermLengthActionPerformed
        int spermSize = (int)(c.getCellLength());
        BufferedImage i = c.getHighlightedImage(c.cells1);
        originalImage = i;
        ImageIcon newImage = rescaleBufferedImage(i,655,440);
        picture.setIcon(newImage);
        spermLength.setVisible(true);
        drawnSpermLength.setVisible(false);
        spermLength.setText("The Sperm Length: " + spermSize + " micrometers");
        System.out.println(spermSize + "");
    }//GEN-LAST:event_getSpermLengthActionPerformed

    private void pictureMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pictureMouseDragged

		if (eraser.isSelected()) {
			erase(evt.getPoint());
		} else {
        	draw(evt.getPoint());
		}
        System.out.println("Mouse is being dragged by user successfully.");
    }//GEN-LAST:event_pictureMouseDragged

    private void pictureMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pictureMousePressed
        System.out.println("Mouse has been Clicked by user.");
		if (eraser.isSelected()) {
			erase(evt.getPoint());
		} else {
        	draw(evt.getPoint());
		}
        System.out.println("Mouse has been Clicked by user successfully.");
    }//GEN-LAST:event_pictureMousePressed

    private void pictureMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pictureMouseReleased
      previousPoint = null;
    }//GEN-LAST:event_pictureMouseReleased

    private void decreaseContrastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decreaseContrastActionPerformed
      try {
            image = ImageIO.read(file);
            c.decreaseContrast();
            ImageIcon newImage = rescaleBufferedImage(c.im,655,440);
            originalImage = c.im;
            picture.setIcon(newImage); 
        } catch (IOException ex) {
            Logger.getLogger(FruitFlyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_decreaseContrastActionPerformed

    private void zoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutActionPerformed
        double zoomLevel = 1.1;
        zoomCount--;
        double newImageWidth = 532 * Math.pow(zoomLevel, zoomCount);
        double newImageHeight = 532 * Math.pow(zoomLevel, zoomCount);
//        AffineTransform af = new AffineTransform();
//        af.scale(1, 1);
//        AffineTransformOp operation = new AffineTransformOp(af, AffineTransformOp.TYPE_NEAREST_NEIGHBOR);
        
        BufferedImage resizedImage = new BufferedImage((int)newImageWidth , 
                (int)newImageHeight, BufferedImage.TYPE_INT_ARGB);
        
//        BufferedImage transformedImage = operation.filter(resizedImage, null);
        
        Graphics2D g = resizedImage.createGraphics();
        g.drawImage(originalImage, 0, 0, (int)newImageWidth , 
                (int)newImageHeight , null);
        g.dispose();
        picture.setIcon(new ImageIcon(resizedImage));  
    }//GEN-LAST:event_zoomOutActionPerformed

    private void zoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInActionPerformed
        double zoomLevel = 1.1;
        zoomCount++;
        double newImageWidth = 532 * Math.pow(zoomLevel, zoomCount);
        double newImageHeight = 532 * Math.pow(zoomLevel, zoomCount);
       
        BufferedImage resizedImage = new BufferedImage((int)newImageWidth , 
                (int)newImageHeight, BufferedImage.TYPE_INT_ARGB);
   
        Graphics2D g = resizedImage.createGraphics();
        g.drawImage(originalImage, 0, 0, (int)newImageWidth , 
                (int)newImageHeight , null);
        g.dispose();
        picture.setIcon(new ImageIcon(resizedImage));   
    }//GEN-LAST:event_zoomInActionPerformed

    private void jSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerStateChanged
       theStrokeSize = (Integer)jSpinner.getValue();
       System.out.println("The StrokeSize is: " + theStrokeSize);
    }//GEN-LAST:event_jSpinnerStateChanged

    private void drawnLengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawnLengthActionPerformed
        double spermSize = c.getDrawingLength();
        spermLength.setVisible(false);
        drawnSpermLength.setVisible(true);
        drawnSpermLength.setText("The Drawn Sperm Length: " + spermSize + " micrometers");
        System.out.println(spermSize + "");
    }//GEN-LAST:event_drawnLengthActionPerformed

    private void clearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllActionPerformed
        c.clearDrawing();
        originalImage = c.im;
        double zoomLevel = 1.1;
        double newImageWidth = 532 * Math.pow(zoomLevel, zoomCount);
        double newImageHeight = 532 * Math.pow(zoomLevel, zoomCount);
       
        BufferedImage resizedImage = new BufferedImage((int)newImageWidth , 
                (int)newImageHeight, BufferedImage.TYPE_INT_ARGB);
   
        Graphics2D g = resizedImage.createGraphics();
        g.drawImage(c.im, 0, 0, (int)newImageWidth , 
                (int)newImageHeight , null);
        g.dispose();
        picture.setIcon(new ImageIcon(resizedImage));   
    }//GEN-LAST:event_clearAllActionPerformed

    private void eraserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eraserActionPerformed

public ImageIcon rescaleImage(File source,int maxHeight, int maxWidth)
{
    int newHeight = 0, newWidth = 0;        // Variables for the new height and width
    int priorHeight = 0, priorWidth = 0;
    BufferedImage image = null;
    ImageIcon sizeImage;

    try 
    {
        image = ImageIO.read(source);        // get the image
    } 
    catch (Exception e) {

        e.printStackTrace();
        System.out.println("Picture upload attempted & failed");
    }

    sizeImage = new ImageIcon(image);

    if(sizeImage != null)
    {
        priorHeight = sizeImage.getIconHeight(); 
        priorWidth = sizeImage.getIconWidth();
    }
    // Calculate the correct new height and width
    if((float)priorHeight/(float)priorWidth > (float)maxHeight/(float)maxWidth)
    {
        newHeight = maxHeight;
        newWidth = (int)(((float)priorWidth/(float)priorHeight)*(float)newHeight);
    }
    else 
    {
        newWidth = maxWidth;
        newHeight = (int)(((float)priorHeight/(float)priorWidth)*(float)newWidth);
    }
    // Resize the image

    // 1. Create a new Buffered Image and Graphic2D object
    BufferedImage resizedImg = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_RGB);
    Graphics2D g2 = resizedImg.createGraphics();

    // 2. Use the Graphic object to draw a new image to the image in the buffer
    g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
    g2.drawImage(image, 0, 0, newWidth, newHeight, null);
    g2.dispose();

    // 3. Convert the buffered image into an ImageIcon for return
    return (new ImageIcon(resizedImg));
}

public ImageIcon rescaleBufferedImage(BufferedImage bi,int maxHeight, int maxWidth)
{
    int newHeight = 0, newWidth = 0;        // Variables for the new height and width
    int priorHeight = 0, priorWidth = 0;
    BufferedImage image = null;
    ImageIcon sizeImage;

    try 
    {
        image = bi;        // get the image
    } 
    catch (Exception e) {

        e.printStackTrace();
        System.out.println("Picture upload attempted & failed");
    }

    sizeImage = new ImageIcon(image);

    if(sizeImage != null)
    {
        priorHeight = sizeImage.getIconHeight(); 
        priorWidth = sizeImage.getIconWidth();
    }
    // Calculate the correct new height and width
    if((float)priorHeight/(float)priorWidth > (float)maxHeight/(float)maxWidth)
    {
        newHeight = maxHeight;
        newWidth = (int)(((float)priorWidth/(float)priorHeight)*(float)newHeight);
    }
    else 
    {
        newWidth = maxWidth;
        newHeight = (int)(((float)priorHeight/(float)priorWidth)*(float)newWidth);
    }
    // Resize the image

    // 1. Create a new Buffered Image and Graphic2D object
    BufferedImage resizedImg = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_RGB);
    Graphics2D g2 = resizedImg.createGraphics();

    // 2. Use the Graphic object to draw a new image to the image in the buffer
    g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
    g2.drawImage(image, 0, 0, newWidth, newHeight, null);
    g2.dispose();

    // 3. Convert the buffered image into an ImageIcon for return
    return (new ImageIcon(resizedImg));
}

//sets the color to be the color specified by the parameter
    public void setColor(Color color) {
        this.color = color;
        System.out.println("This should be the set color: " + this.color);
        clear(colorSample);
    }
    
// Clears the entire image area by painting it with the current color. */
    public void clear(BufferedImage bi) {
        Graphics2D g = bi.createGraphics();
        g.setColor(color);
        g.fillRect(0, 0, bi.getWidth(), bi.getHeight());
        g.dispose();
        picture.repaint();
    }
    
    public void erase(Point point){
                System.out.println("Entering the draw method");
        Graphics2D g = originalImage.createGraphics();
        g.setColor(this.color);
        g.setStroke(stroke);
        int n = 0;
        int scrollWidth = scrollPane.getViewport().getViewPosition().x;
        int scrollHeight = scrollPane.getViewport().getViewPosition().y;
        System.out.println("ScrollWidth: " + scrollWidth + "  ScrollHeight: " + scrollHeight);
        System.out.println("Point x: " + point.x + "   Point y:  " + point.y);
        if(previousPoint!= null){
                c.eraseLine(originalImage,previousPoint,point,zoomCount, theStrokeSize);
        }
        previousPoint = point;
        double zoomLevel = 1.1;
        double newImageWidth = 532 * Math.pow(zoomLevel, zoomCount);
        double newImageHeight = 532 * Math.pow(zoomLevel, zoomCount);
       
        BufferedImage resizedImage = new BufferedImage((int)newImageWidth , 
                (int)newImageHeight, BufferedImage.TYPE_INT_ARGB);
   
  
        Graphics2D g2 = resizedImage.createGraphics();
        g2.drawImage(originalImage, 0, 0, (int)newImageWidth , 
                (int)newImageHeight , null);
        g2.dispose();
        picture.setIcon(new ImageIcon(resizedImage));  
    }
// Draw Method
    public void draw(Point point) {
        System.out.println("Entering the draw method");
        Graphics2D g = originalImage.createGraphics();
        g.setColor(this.color);
        g.setStroke(stroke);
        int n = 0;
        int scrollWidth = scrollPane.getViewport().getViewPosition().x;
        int scrollHeight = scrollPane.getViewport().getViewPosition().y;
        System.out.println("ScrollWidth: " + scrollWidth + "  ScrollHeight: " + scrollHeight);
        System.out.println("Point x: " + point.x + "   Point y:  " + point.y);
        if(previousPoint!= null){
           c.drawLine(originalImage, previousPoint, point, zoomCount, theStrokeSize, this.color);
        }
        previousPoint = point;
        double zoomLevel = 1.1;
        double newImageWidth = 532 * Math.pow(zoomLevel, zoomCount);
        double newImageHeight = 532 * Math.pow(zoomLevel, zoomCount);
       
        BufferedImage resizedImage = new BufferedImage((int)newImageWidth , 
                (int)newImageHeight, BufferedImage.TYPE_INT_ARGB);
   
  
        Graphics2D g2 = resizedImage.createGraphics();
        g2.drawImage(originalImage, 0, 0, (int)newImageWidth , 
                (int)newImageHeight , null);
        g2.dispose();
        picture.setIcon(new ImageIcon(resizedImage));   
      
    }
   
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FruitFlyGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem Open;
    private javax.swing.JToolBar brightnessBar;
    private javax.swing.JButton clearAll;
    private javax.swing.JButton colorButton;
    private javax.swing.JButton decreaseContrast;
    private javax.swing.JToolBar drawBar;
    private javax.swing.JButton drawnLength;
    private javax.swing.JLabel drawnSpermLength;
    private javax.swing.JRadioButton eraser;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JButton getSpermLength;
    private javax.swing.JButton increaseContrast;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JSpinner jSpinner;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JLabel picture;
    private javax.swing.JFrame pictureFrame2;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JLabel spermLength;
    private java.awt.Label title;
    private javax.swing.JButton zoomIn;
    private javax.swing.JButton zoomOut;
    // End of variables declaration//GEN-END:variables
}
